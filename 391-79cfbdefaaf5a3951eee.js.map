{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-sml.min.js"],"names":["e","n","Prism","languages","sml","comment","string","pattern","greedy","RegExp","replace","source","lookbehind","inside","keyword","variable","number","word","alias","operator","punctuation","smlnj"],"mappings":"gFAIC,IAAUA,EACLC,EALN,EAAQ,QAER,EAAQ,QAEGD,EA2CTE,MA1CID,EAAI,0PACRD,EAAEG,UAAUC,IAAM,CAChBC,QAAS,4EACTC,OAAQ,CACNC,QAAS,sBACTC,QAAQ,GAEV,aAAc,CAAC,CACbD,QAASE,OAAO,iIAAiIC,QAAQ,eAAe,WACtK,MAAO,qBACNA,QAAQ,eAAe,WACxB,MAAO,0GACNA,QAAQ,cAAc,WACvB,MAAO,oCACNA,QAAQ,cAAc,WACvB,OAAOT,EAAEU,UACP,KACJC,YAAY,EACZJ,QAAQ,EACRK,OAAQ,MACP,CACDN,QAAS,yFACTK,YAAY,IAEd,SAAY,CACVL,QAAS,qCACTK,YAAY,GAEdE,QAASb,EACTc,SAAU,CACRR,QAAS,oBACTK,YAAY,GAEdI,OAAQ,iDACRC,KAAM,CACJV,QAAS,2BACTW,MAAO,YAET,QAAW,sBACXC,SAAU,4CACVC,YAAa,kBACZpB,EAAEG,UAAUC,IAAI,cAAc,GAAGS,OAASb,EAAEG,UAAUC,IAAKJ,EAAEG,UAAUkB,MAAQrB,EAAEG,UAAUC","file":"391-79cfbdefaaf5a3951eee.js","sourcesContent":["require(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.constructor\");\n\n!function (e) {\n  var n = /\\b(?:abstype|and|andalso|as|case|datatype|do|else|end|eqtype|exception|fn|fun|functor|handle|if|in|include|infix|infixr|let|local|nonfix|of|op|open|orelse|raise|rec|sharing|sig|signature|struct|structure|then|type|val|where|while|with|withtype)\\b/i;\n  e.languages.sml = {\n    comment: /\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*)|\\(\\*(?:[^*(]|\\*(?!\\))|\\((?!\\*))*\\*\\))*\\*\\)/,\n    string: {\n      pattern: /#?\"(?:[^\"\\\\]|\\\\.)*\"/,\n      greedy: !0\n    },\n    \"class-name\": [{\n      pattern: RegExp(\"((?:^|[^:]):\\\\s*)<TERMINAL>(?:\\\\s*(?:(?:\\\\*|->)\\\\s*<TERMINAL>|,\\\\s*<TERMINAL>(?:(?=<NOT-LAST>)|(?!<NOT-LAST>)\\\\s+<LONG-ID>)))*\".replace(/<NOT-LAST>/g, function () {\n        return \"\\\\s*(?:[*,]|->)\";\n      }).replace(/<TERMINAL>/g, function () {\n        return \"(?:'[\\\\w']*|<LONG-ID>|\\\\((?:[^()]|\\\\([^()]*\\\\))*\\\\)|\\\\{(?:[^{}]|\\\\{[^{}]*\\\\})*\\\\})(?:\\\\s+<LONG-ID>)*\";\n      }).replace(/<LONG-ID>/g, function () {\n        return \"(?!<KEYWORD>)[a-z\\\\d_][\\\\w'.]*\";\n      }).replace(/<KEYWORD>/g, function () {\n        return n.source;\n      }), \"i\"),\n      lookbehind: !0,\n      greedy: !0,\n      inside: null\n    }, {\n      pattern: /((?:^|[^\\w'])(?:datatype|exception|functor|signature|structure|type)\\s+)[a-z_][\\w'.]*/i,\n      lookbehind: !0\n    }],\n    \"function\": {\n      pattern: /((?:^|[^\\w'])fun\\s+)[a-z_][\\w'.]*/i,\n      lookbehind: !0\n    },\n    keyword: n,\n    variable: {\n      pattern: /(^|[^\\w'])'[\\w']*/,\n      lookbehind: !0\n    },\n    number: /~?\\b(?:\\d+(?:\\.\\d+)?(?:e~?\\d+)?|0x[\\da-f]+)\\b/i,\n    word: {\n      pattern: /\\b0w(?:\\d+|x[\\da-f]+)\\b/i,\n      alias: \"constant\"\n    },\n    \"boolean\": /\\b(?:false|true)\\b/i,\n    operator: /\\.\\.\\.|:[>=:]|=>?|->|[<>]=?|[!+\\-*/^#|@~]/,\n    punctuation: /[(){}\\[\\].:,;]/\n  }, e.languages.sml[\"class-name\"][0].inside = e.languages.sml, e.languages.smlnj = e.languages.sml;\n}(Prism);"],"sourceRoot":""}