{"version":3,"sources":["webpack:///./node_modules/prismjs/components/prism-yaml.js"],"names":["Prism","anchorOrAlias","tag","properties","source","plainKey","replace","string","createValuePattern","value","flags","pattern","RegExp","languages","yaml","lookbehind","alias","greedy","yml"],"mappings":"gFAAA,EAAQ,QAER,EAAQ,QAER,SAAWA,GAGT,IAAIC,EAAgB,mBAEhBC,EAAM,mFAENC,EAAa,MAAQD,EAAIE,OAAS,YAAcH,EAAcG,OAAS,MAAQH,EAAcG,OAAS,YAAcF,EAAIE,OAAS,MAIjIC,EAAW,kJAAkJD,OAAOE,QAAQ,YAAY,WAC1L,MAAO,2EAA2EF,UAEhFG,EAAS,8CAA8CH,OAQ3D,SAASI,EAAmBC,EAAOC,GACjCA,GAASA,GAAS,IAAIJ,QAAQ,KAAM,IAAM,IAE1C,IAAIK,EAAU,4EAA4EP,OAAOE,QAAQ,aAAa,WACpH,OAAOH,KACNG,QAAQ,cAAc,WACvB,OAAOG,KAET,OAAOG,OAAOD,EAASD,GAGzBV,EAAMa,UAAUC,KAAO,CACrB,OAAU,CACRH,QAASC,OAAO,2FAA2FR,OAAOE,QAAQ,aAAa,WACrI,OAAOH,MAETY,YAAY,EACZC,MAAO,UAET,QAAW,MACX,IAAO,CACLL,QAASC,OAAO,kEAAkER,OAAOE,QAAQ,aAAa,WAC5G,OAAOH,KACNG,QAAQ,YAAY,WACrB,MAAO,MAAQD,EAAW,IAAME,EAAS,QAE3CQ,YAAY,EACZE,QAAQ,EACRD,MAAO,UAET,UAAa,CACXL,QAAS,gBACTI,YAAY,EACZC,MAAO,aAET,SAAY,CACVL,QAASH,EAAmB,kJAAkJJ,QAC9KW,YAAY,EACZC,MAAO,UAET,QAAW,CACTL,QAASH,EAAmB,aAAaJ,OAAQ,KACjDW,YAAY,EACZC,MAAO,aAET,KAAQ,CACNL,QAASH,EAAmB,SAASJ,OAAQ,KAC7CW,YAAY,EACZC,MAAO,aAET,OAAU,CACRL,QAASH,EAAmBD,GAC5BQ,YAAY,EACZE,QAAQ,GAEV,OAAU,CACRN,QAASH,EAAmB,8EAA8EJ,OAAQ,KAClHW,YAAY,GAEd,IAAOb,EACP,UAAaD,EACb,YAAe,6BAEjBD,EAAMa,UAAUK,IAAMlB,EAAMa,UAAUC,KArFxC,CAsFGd","file":"466-bb39e085a9f571d16ed5.js","sourcesContent":["require(\"core-js/modules/es6.regexp.constructor\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\n(function (Prism) {\n  // https://yaml.org/spec/1.2/spec.html#c-ns-anchor-property\n  // https://yaml.org/spec/1.2/spec.html#c-ns-alias-node\n  var anchorOrAlias = /[*&][^\\s[\\]{},]+/; // https://yaml.org/spec/1.2/spec.html#c-ns-tag-property\n\n  var tag = /!(?:<[\\w\\-%#;/?:@&=+$,.!~*'()[\\]]+>|(?:[a-zA-Z\\d-]*!)?[\\w\\-%#;/?:@&=+$.~*'()]+)?/; // https://yaml.org/spec/1.2/spec.html#c-ns-properties(n,c)\n\n  var properties = '(?:' + tag.source + '(?:[ \\t]+' + anchorOrAlias.source + ')?|' + anchorOrAlias.source + '(?:[ \\t]+' + tag.source + ')?)'; // https://yaml.org/spec/1.2/spec.html#ns-plain(n,c)\n  // This is a simplified version that doesn't support \"#\" and multiline keys\n  // All these long scarry character classes are simplified versions of YAML's characters\n\n  var plainKey = /(?:[^\\s\\x00-\\x08\\x0e-\\x1f!\"#%&'*,\\-:>?@[\\]`{|}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]|[?:-]<PLAIN>)(?:[ \\t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g, function () {\n    return /[^\\s\\x00-\\x08\\x0e-\\x1f,[\\]{}\\x7f-\\x84\\x86-\\x9f\\ud800-\\udfff\\ufffe\\uffff]/.source;\n  });\n  var string = /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"|'(?:[^'\\\\\\r\\n]|\\\\.)*'/.source;\n  /**\n   *\n   * @param {string} value\n   * @param {string} [flags]\n   * @returns {RegExp}\n   */\n\n  function createValuePattern(value, flags) {\n    flags = (flags || '').replace(/m/g, '') + 'm'; // add m flag\n\n    var pattern = /([:\\-,[{]\\s*(?:\\s<<prop>>[ \\t]+)?)(?:<<value>>)(?=[ \\t]*(?:$|,|]|}|\\s*#))/.source.replace(/<<prop>>/g, function () {\n      return properties;\n    }).replace(/<<value>>/g, function () {\n      return value;\n    });\n    return RegExp(pattern, flags);\n  }\n\n  Prism.languages.yaml = {\n    'scalar': {\n      pattern: RegExp(/([\\-:]\\s*(?:\\s<<prop>>[ \\t]+)?[|>])[ \\t]*(?:((?:\\r?\\n|\\r)[ \\t]+)[^\\r\\n]+(?:\\2[^\\r\\n]+)*)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      })),\n      lookbehind: true,\n      alias: 'string'\n    },\n    'comment': /#.*/,\n    'key': {\n      pattern: RegExp(/((?:^|[:\\-,[{\\r\\n?])[ \\t]*(?:<<prop>>[ \\t]+)?)<<key>>(?=\\s*:\\s)/.source.replace(/<<prop>>/g, function () {\n        return properties;\n      }).replace(/<<key>>/g, function () {\n        return '(?:' + plainKey + '|' + string + ')';\n      })),\n      lookbehind: true,\n      greedy: true,\n      alias: 'atrule'\n    },\n    'directive': {\n      pattern: /(^[ \\t]*)%.+/m,\n      lookbehind: true,\n      alias: 'important'\n    },\n    'datetime': {\n      pattern: createValuePattern(/\\d{4}-\\d\\d?-\\d\\d?(?:[tT]|[ \\t]+)\\d\\d?:\\d{2}:\\d{2}(?:\\.\\d*)?[ \\t]*(?:Z|[-+]\\d\\d?(?::\\d{2})?)?|\\d{4}-\\d{2}-\\d{2}|\\d\\d?:\\d{2}(?::\\d{2}(?:\\.\\d*)?)?/.source),\n      lookbehind: true,\n      alias: 'number'\n    },\n    'boolean': {\n      pattern: createValuePattern(/true|false/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'null': {\n      pattern: createValuePattern(/null|~/.source, 'i'),\n      lookbehind: true,\n      alias: 'important'\n    },\n    'string': {\n      pattern: createValuePattern(string),\n      lookbehind: true,\n      greedy: true\n    },\n    'number': {\n      pattern: createValuePattern(/[+-]?(?:0x[\\da-f]+|0o[0-7]+|(?:\\d+\\.?\\d*|\\.?\\d+)(?:e[+-]?\\d+)?|\\.inf|\\.nan)/.source, 'i'),\n      lookbehind: true\n    },\n    'tag': tag,\n    'important': anchorOrAlias,\n    'punctuation': /---|[:[\\]{}\\-,|>?]|\\.\\.\\./\n  };\n  Prism.languages.yml = Prism.languages.yaml;\n})(Prism);"],"sourceRoot":""}